#include <TXLib.h>
#include <math.h>
#include <stdio.h>
#include <assert.h>
#define MICRO 10e-6
//#define INF //1000
//#define NAN

struct StructTest
    {
    int testNumber;
    double a, b, c;
    double x1Good, x2Good;
    int nRootsGood;
    };

typedef enum
    {
    NO_ROOTS,
    ONE_ROOT,
    TWO_ROOTS,
    IN_FINITY
    } NumbRoots;

typedef enum
    {
    False,
    True
    } Logic;
    
typedef enum
    {
    NEGATIVE = -1,
    NULL,
    POSITIVE
    } Comparison_with_zero;
    
    

void Input (double* a, double* b, double* c);

int Calculation (double a, double b, double c,
                 double* x1, double* x2);

void Output (int nRoots, double x1, double x2);

int SolveLine (double a, double b, double c,
               double* x1);

int SolveSquare (double a, double b, double c,
                 double* x1, double* x2);

int IS_zero (double y);

int IS_comparison (double n, double m);

//int RunTest (double a, double b, double c, double x1good, double x2good, int nRootsgood);
int RunTest (struct StructTest test);

void CleanBufer ();

int Testing ();

int main () /*Квадратка*/
    {
    double a = 0, b = 0, c = 0;
    double x1 = 0, x2 = 0;
    int i = 1;

    int Testing ();

    if (Testing ()  == True)
        {
        printf ("Тест прошёл успешно!\n\n");

        printf ("Для запуска программы нажмите [Enter]\nДля выхода нажмите [Ctrl/Z], затем дважды [Enter]\n");

        int ch = 0;

        while ((ch = getchar()) != EOF)
            {
            printf ("Запуск номер %d\n", i++);

            Input (&a, &b, &c);

            assert (isfinite (a)); //возможно перенести
            assert (isfinite (b));
            assert (isfinite (c));

            int nRoots = Calculation (a, b, c, &x1, &x2);

            Output (nRoots, x1, x2);

            CleanBufer ();

            printf ("\n\nДля запуска программы нажмите [Enter]\nДля выхода нажмите [Ctri/Z], затем дважды [Enter]\n");
            }
        }
    else
        printf ("Переписывай программу");
    return 0;
    }

void Input (double* a, double* b, double* c)
    {
    assert (a != 0);
    assert (b != 0);
    assert (c != 0);
    printf ("Введите значения коэффииентов квадратного уравнения по порядку\n");

    int vvod = scanf ("%lg %lg %lg", a, b, c);

    if (vvod < 3)
        {
        int i = 0;

        for (i; vvod < 3; i++)
            {
            if (i == 5)
                break;

            printf ("Неверный ввод данных! \n Введите числа\n ");

            CleanBufer ();

            vvod = scanf ("%lg %lg %lg", a, b, c);
            }
        }
    }

int Calculation (double a, double b, double c,
                 double* x1, double* x2)
    {
    assert (isfinite (a));
    assert (isfinite (b));
    assert (isfinite (c));

    assert (x1 != 0);
    assert (x2 != 0);
    assert (x1 != x2);

    if (IS_zero (a) == True)
        return SolveLine (a, b, c, x1);
    else /* if (a != 0) */
        return SolveSquare (a, b, c, x1, x2);
    }

int SolveLine (double a, double b, double c,
               double* x1)
    {
    assert (isfinite (a));
    assert (isfinite (b));
    assert (isfinite (c));

    assert (x1 != 0);

    if (IS_zero (b) == True)
        {
        if (IS_zero (c) == True)
            return IN_FINITY;
        else /* if (c != 0)*/
            return NO_ROOTS;
        }
    else /* if (b != 0) */
        {
        *x1 = -c / b;
        return ONE_ROOT;
        }
    }
void Output (int nRoots, double x1, double x2)
    {
    switch (nRoots)
        {
        case NO_ROOTS:
            printf ("Нет корней\n");
            break;

        case ONE_ROOT:
            printf ("Один корень \n x = %lg\n", x1);
            break;

        case TWO_ROOTS:
            printf ("Корни квадратного уравнения: \n x1 = %lg, x2 = %lg\n", x1, x2);
            break;

        case IN_FINITY:
            printf ("Бесконечно много корней\n");
            break;
        }
    }

int SolveSquare (double a, double b, double c,
                 double* x1, double* x2)
    {
    assert (isfinite (a));
    assert (isfinite (b));
    assert (isfinite (c));

    assert (x1 != 0);
    assert (x2 != 0);
    assert (x1 != x2);

    double d = b * b - 4 * a * c;

    if (Comparison_with_zero(d) == Negative) 
        return NO_ROOTS;
    else if (Comparison_with_zero(d) == Null)
        {
        *x1 = -b / (2 * a);
        return ONE_ROOT;
        }
    else
        {
        double sqrt_d = sqrt (d);

        *x1 = (-b + sqrt_d) / (2 * a);
        *x2 = (-b - sqrt_d) / (2 * a);

        return TWO_ROOTS;
        }
    }

int Comparison_with_zero (double y) /*Сравниваем с нулём некоторую переменную*/
    {
    if (fabs(y) < MICRO)
        return  NULL;
    else if (y > MICRO)
        return Positive;
    else 
        return Negative;
    }

int IS_comparison (double n, double m) /*Проверяем равенство вещественных переменных*/
    {
    if (fabs (m - n) < MICRO)
        return True;
    else
        return False;
    }

/*int RunTest (double a, double b, double c, double x1Good, double x2Good, int nRootsGood)
    {
    assert (isfinite (a));
    assert (isfinite (b));
    assert (isfinite (c));

    assert (isfinite (x1Good));
    assert (isfinite (x2Good));
    assert (isfinite (nRootsGood));

    double x1 = 0, x2 = 0;

    int nRoots = Calculation (a, b, c, &x1, &x2);

    if (nRoots != nRootsGood || IS_comparison(x1, x1Good) == False || IS_comparison(x2, x2Good) == False)
        {
        printf ("Тест не пройден: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, nRoots = %d\n"
                "Должно быть так: x1 = %lg, x2 = %lg, nRoots = %d\n",
                a, b, c, x1, x2, nRoots, x1Good, x2Good, nRootsGood);
        return False;
        }
    else
        return True;
    }            */

int RunTest (struct StructTest test)
    {
    assert (isfinite (test.a));
    assert (isfinite (test.b));
    assert (isfinite (test.c));

    assert (isfinite (test.x1Good));
    assert (isfinite (test.x2Good));
    assert (isfinite (test.nRootsGood));

    double x1 = 0, x2 = 0;

    int nRoots = Calculation (test.a, test.b, test.c, &x1, &x2);

    if (nRoots != test.nRootsGood || IS_comparison(x1, test.x1Good) == False || IS_comparison(x2, test.x2Good) == False)
        {
        printf ("Тест не пройден: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, nRoots = %d\n"
                "Должно быть так: x1 = %lg, x2 = %lg, nRoots = %d\n",
                test.a, test.b, test.c, x1, x2, nRoots, test.x1Good, test.x2Good, test.nRootsGood);
        return False;
        }
    else
        return True;
    }

void CleanBufer ()
    {
    while (getchar() != '\n') {}
    }

int Testing ()
    {
/*int a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0;

a = RunTest (1, 2, -3, 1, -3, 2);
b = RunTest (1.1, 2.2, -3.3, 1, -3, 2);
c = RunTest (1, -4, 4, 2, 0, 1);
d = RunTest (0, 0, 0, 0, 0, IN_FINITY);
e = RunTest (0, 2, -3, 1.5, 0, 1);
f = RunTest (7, 7, 7, 0, 0, 0);
g = RunTest (0, 0, 7, 0, 0, 0);

if (count (a, b, c, d, e, f, g) < 7)//(a == False || b == False || c == False || d == False || e == False || f == False || g == False)
    return False;
else
    return True;   */

    const int N = 7;

    StructTest test1 = {1, 1, 2, -3, 1, -3, 2};
    StructTest test2 = {1.1, 2.2, -3.3, 1, -3, 2};
    StructTest test3 = {3, 1, -4, 4, 2, 0, 1};
    StructTest test4 = {4, 0, 0, 0, 0, 0, IN_FINITY};
    StructTest test5 = {5, 0, 2, -3, 1.5, 0, 1};
    StructTest test6 = {6, 7, 7, 7, 0, 0, 0};
    StructTest test7 = {7, 0, 0, 7, 0, 0, 0};

/*for (int i = 0, .testNumber < N, i++)
{
RunTest (*/

    if (RunTest(test1) + RunTest(test2) + RunTest(test3) +
        RunTest(test4) + RunTest(test5) + RunTest(test6) + RunTest(test7) < N)
        return False;
    else
        return True;

    }
